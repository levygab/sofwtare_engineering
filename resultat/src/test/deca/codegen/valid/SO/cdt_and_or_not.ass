; start main program
	TSTO #10
	BOV pile_pleine
	BRA DebutMain
code.Object.equals:
init.Object:
	RTS
	LOAD #null, R0
	STORE R0, 1(GB)
	LOAD code.Object.equals, R0
	STORE R0, 2(GB)
; Main program
DebutMain:
; Beginning of main declarations
	LOAD #5, R3
	STORE R3, 1(LB)
	ADDSP #1
	LOAD #2, R4
	LOAD #3, R3
	ADD R4, R3
	FLOAT R3, R3
	STORE R3, 2(LB)
	ADDSP #1
	LOAD #10, R3
	STORE R3, 3(LB)
	ADDSP #1
	LOAD #25, R3
	STORE R3, 4(LB)
	ADDSP #1
	LOAD #0, R3
	STORE R3, 5(LB)
	ADDSP #1
	LOAD #0, R3
	STORE R3, 6(LB)
	ADDSP #1
	LOAD #0, R3
	STORE R3, 7(LB)
	ADDSP #1
	LOAD #0, R3
	STORE R3, 8(LB)
	ADDSP #1
	LOAD #0, R3
	STORE R3, 9(LB)
	ADDSP #1
	LOAD #0, R3
	STORE R3, 10(LB)
	ADDSP #1
; Beginning of main instructions:
	LOAD 1(LB), R3
	LOAD #5, R4
	CMP R4, R3
	BNE else0
	LOAD 2(LB), R3
	LOAD #5, R4
	FLOAT R4, R4
	CMP R4, R3
	BNE else0
	LOAD #1, R4
	STORE R4, 5(LB)
	BRA if_fin0
else0:
if_fin0:
	LOAD 1(LB), R3
	LOAD #5, R4
	CMP R4, R3
	BNE else1
	LOAD 2(LB), R3
	LOAD #6, R4
	FLOAT R4, R4
	CMP R4, R3
	BNE else1
	WSTR "pas normale 1"
	WNL
	BRA if_fin1
else1:
if_fin1:
	LOAD 1(LB), R3
	LOAD #6, R4
	CMP R4, R3
	BNE else2
	LOAD 2(LB), R3
	LOAD #5, R4
	FLOAT R4, R4
	CMP R4, R3
	BNE else2
	WSTR "pas normale 2"
	WNL
	BRA if_fin2
else2:
if_fin2:
	LOAD 1(LB), R3
	LOAD #6, R4
	CMP R4, R3
	BNE else3
	LOAD 2(LB), R3
	LOAD #6, R4
	FLOAT R4, R4
	CMP R4, R3
	BNE else3
	WSTR "pas normale 3"
	WNL
	BRA if_fin3
else3:
if_fin3:
	LOAD 1(LB), R4
	LOAD #5, R5
	CMP R5, R4
	BEQ True5
	BNE False5
True5:
	LOAD #1, R4
	BRA Fin5
False5:
	LOAD #0, R4
	BRA Fin5
Fin5:
	LOAD #1, R3
	SUB R4, R3
	LOAD #1, R0
	CMP R0, R3
	BNE else4
	WSTR "pas normal 4"
	WNL
	BRA if_fin4
else4:
if_fin4:
	LOAD 1(LB), R4
	LOAD #6, R5
	CMP R5, R4
	BEQ True7
	BNE False7
True7:
	LOAD #1, R4
	BRA Fin7
False7:
	LOAD #0, R4
	BRA Fin7
Fin7:
	LOAD #1, R3
	SUB R4, R3
	LOAD #1, R0
	CMP R0, R3
	BNE else6
	WSTR "bjr"
	WNL
	LOAD #1, R4
	STORE R4, 6(LB)
	BRA if_fin6
else6:
if_fin6:
	LOAD 1(LB), R3
	LOAD #5, R5
	CMP R5, R3
	BEQ instOr9
	LOAD 2(LB), R4
	LOAD #5, R5
	FLOAT R5, R5
	CMP R5, R4
	BNE else8
instOr9:
	LOAD #1, R4
	STORE R4, 7(LB)
	BRA if_fin8
else8:
if_fin8:
	LOAD 1(LB), R3
	LOAD #5, R5
	CMP R5, R3
	BEQ instOr11
	LOAD 2(LB), R4
	LOAD #6, R5
	FLOAT R5, R5
	CMP R5, R4
	BNE else10
instOr11:
	LOAD #1, R4
	STORE R4, 8(LB)
	BRA if_fin10
else10:
if_fin10:
	LOAD 1(LB), R3
	LOAD #6, R5
	CMP R5, R3
	BEQ instOr13
	LOAD 2(LB), R4
	LOAD #5, R5
	FLOAT R5, R5
	CMP R5, R4
	BNE else12
instOr13:
	LOAD #1, R4
	STORE R4, 9(LB)
	BRA if_fin12
else12:
if_fin12:
	LOAD 1(LB), R3
	LOAD #6, R5
	CMP R5, R3
	BEQ instOr15
	LOAD 2(LB), R4
	LOAD #6, R5
	FLOAT R5, R5
	CMP R5, R4
	BNE else14
instOr15:
	WSTR "pas normal 5"
	WNL
	BRA if_fin14
else14:
if_fin14:
	LOAD 1(LB), R3
	LOAD #5, R4
	CMP R4, R3
	BEQ else16
	WSTR "pas normal 6"
	WNL
	BRA if_fin16
else16:
if_fin16:
	LOAD 1(LB), R3
	LOAD #10, R4
	CMP R4, R3
	BEQ else17
	LOAD #1, R4
	STORE R4, 10(LB)
	BRA if_fin17
else17:
if_fin17:
	LOAD 10(LB), R3
	LOAD #1, R0
	CMP R0, R3
	BNE else18
	WSTR "les test sont bien passes"
	WNL
	BRA if_fin18
else18:
	WSTR "probleme dans les test"
	WNL
if_fin18:
	HALT
; end main program
io_error:
	WSTR "Error: Input/Output error"
	WNL
	ERROR
io_error_div_O:
	WSTR "Division par 0 interdite"
	WNL
	ERROR
io_debordement_valeur:
	WSTR "Error: Debordement flottant nombre trop grand"
	WNL
	ERROR
pile_pleine:
	WSTR "Erreur : la pile est pleine"
	WNL
	ERROR
tas_plein:
	WSTR "Erreur : le tas est plein"
	WNL
	ERROR
Deferencement_de_null:
	WSTR "L'identifier est null"
	WNL
	ERROR
io_error_index_out_of_range:
	WSTR "Erreur : Index out of range"
	WNL
	ERROR
io_incorrect_sizes:
	WSTR "Erreur : Les tableaux passées en paramètres doivent être de bonnes tailles"
	WNL
	ERROR
