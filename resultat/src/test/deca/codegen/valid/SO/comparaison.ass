; start main program
	TSTO #10
	BOV pile_pleine
	BRA DebutMain
code.Object.equals:
init.Object:
	RTS
	LOAD #null, R0
	STORE R0, 1(GB)
	LOAD code.Object.equals, R0
	STORE R0, 2(GB)
; Main program
DebutMain:
; Beginning of main declarations
	LOAD #5, R3
	STORE R3, 1(LB)
	ADDSP #1
	LOAD #3, R4
	LOAD #3, R3
	ADD R4, R3
	FLOAT R3, R3
	STORE R3, 2(LB)
	ADDSP #1
	LOAD #5, R3
	STORE R3, 3(LB)
	ADDSP #1
	LOAD #0, R0
	STORE R0, 4(LB)
	ADDSP #1
	LOAD #0, R3
	STORE R3, 5(LB)
	ADDSP #1
	LOAD #0, R3
	STORE R3, 6(LB)
	ADDSP #1
	LOAD #0, R3
	STORE R3, 7(LB)
	ADDSP #1
	LOAD #0, R3
	STORE R3, 8(LB)
	ADDSP #1
	LOAD #0, R3
	STORE R3, 9(LB)
	ADDSP #1
	LOAD #0, R3
	STORE R3, 10(LB)
	ADDSP #1
; Beginning of main instructions:
	LOAD #25, R3
	STORE R3, 4(LB)
	LOAD 1(LB), R3
	FLOAT R3, R3
	LOAD 2(LB), R4
	CMP R4, R3
	BGE else0
	LOAD #1, R4
	STORE R4, 5(LB)
	BRA if_fin0
else0:
if_fin0:
	LOAD 2(LB), R3
	LOAD 1(LB), R4
	FLOAT R4, R4
	CMP R4, R3
	BGE else1
	WSTR "il y a un pb1"
	WNL
	BRA if_fin1
else1:
if_fin1:
	LOAD 1(LB), R3
	LOAD 3(LB), R4
	CMP R4, R3
	BGE else2
	WSTR "il y a un pb1.2"
	WNL
	BRA if_fin2
else2:
if_fin2:
	LOAD 1(LB), R3
	FLOAT R3, R3
	LOAD 2(LB), R4
	CMP R4, R3
	BGT else3
	LOAD #1, R4
	STORE R4, 6(LB)
	BRA if_fin3
else3:
if_fin3:
	LOAD 1(LB), R3
	LOAD 3(LB), R4
	CMP R4, R3
	BGT else4
	LOAD #1, R4
	STORE R4, 7(LB)
	BRA if_fin4
else4:
if_fin4:
	LOAD 2(LB), R3
	LOAD 1(LB), R4
	FLOAT R4, R4
	CMP R4, R3
	BGT else5
	WSTR "il y a un pb2"
	WNL
	BRA if_fin5
else5:
if_fin5:
	LOAD 2(LB), R3
	LOAD 1(LB), R4
	FLOAT R4, R4
	CMP R4, R3
	BLT else6
	LOAD #1, R4
	STORE R4, 8(LB)
	BRA if_fin6
else6:
if_fin6:
	LOAD 1(LB), R3
	LOAD 3(LB), R4
	CMP R4, R3
	BLT else7
	LOAD #1, R4
	STORE R4, 9(LB)
	BRA if_fin7
else7:
if_fin7:
	LOAD 1(LB), R3
	FLOAT R3, R3
	LOAD 2(LB), R4
	CMP R4, R3
	BLT else8
	WSTR "il y a un pb3"
	WNL
	BRA if_fin8
else8:
if_fin8:
	LOAD 2(LB), R3
	LOAD 1(LB), R4
	FLOAT R4, R4
	CMP R4, R3
	BLE else9
	LOAD #1, R4
	STORE R4, 10(LB)
	BRA if_fin9
else9:
if_fin9:
	LOAD 1(LB), R3
	LOAD 3(LB), R4
	CMP R4, R3
	BLE else10
	WSTR "il y a un pb4"
	WNL
	BRA if_fin10
else10:
if_fin10:
	LOAD 1(LB), R3
	FLOAT R3, R3
	LOAD 2(LB), R4
	CMP R4, R3
	BLE else11
	WSTR "il y a un pb5"
	WNL
	BRA if_fin11
else11:
if_fin11:
	LOAD 5(LB), R3
	LOAD #1, R0
	CMP R0, R3
	BNE else12
	LOAD 6(LB), R3
	LOAD #1, R0
	CMP R0, R3
	BNE else12
	LOAD 7(LB), R3
	LOAD #1, R0
	CMP R0, R3
	BNE else12
	LOAD 8(LB), R3
	LOAD #1, R0
	CMP R0, R3
	BNE else12
	LOAD 9(LB), R3
	LOAD #1, R0
	CMP R0, R3
	BNE else12
	LOAD 10(LB), R3
	LOAD #1, R0
	CMP R0, R3
	BNE else12
	WSTR "tres bien"
	WNL
	BRA if_fin12
else12:
if_fin12:
	HALT
; end main program
io_error:
	WSTR "Error: Input/Output error"
	WNL
	ERROR
io_error_div_O:
	WSTR "Division par 0 interdite"
	WNL
	ERROR
io_debordement_valeur:
	WSTR "Error: Debordement flottant nombre trop grand"
	WNL
	ERROR
pile_pleine:
	WSTR "Erreur : la pile est pleine"
	WNL
	ERROR
tas_plein:
	WSTR "Erreur : le tas est plein"
	WNL
	ERROR
Deferencement_de_null:
	WSTR "L'identifier est null"
	WNL
	ERROR
io_error_index_out_of_range:
	WSTR "Erreur : Index out of range"
	WNL
	ERROR
io_incorrect_sizes:
	WSTR "Erreur : Les tableaux passées en paramètres doivent être de bonnes tailles"
	WNL
	ERROR
